// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebMotors.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute(TestName="Consultar veículos através dos filtros Marca de Carro")]
    [NUnit.Framework.DescriptionAttribute("\tEu como usuário do sistema\r\n\tPara garantir que os filtros Marca de Carro estão f" +
        "uncionando corretamente\r\n\tDesejo que apresentem veículos somente das marcas que " +
        "estou buscando\r\n\r\n--Cenário 1")]
    public partial class ConsultarVeiculosAtravesDosFiltrosMarcaDeCarroFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Consultar dois veículos informando os filtros Marca, Modelo e Versão.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Consultar veículos através dos filtros Marca de Carro", "\tEu como usuário do sistema\r\n\tPara garantir que os filtros Marca de Carro estão f" +
                    "uncionando corretamente\r\n\tDesejo que apresentem veículos somente das marcas que " +
                    "estou buscando\r\n\r\n--Cenário 1", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.DescriptionAttribute("Consultar veículos, informando os filtros Marca de Carro")]
        [NUnit.Framework.TestCaseAttribute("chevrolet", "CAPTIVA", "2.4 SFI ECOTEC FWD 16V GASOLINA 4P AUTOMÁTICO", "carros encontrados", null, TestName="Consultar veículos, informando os filtros Marca de Carro(chevrolet,CAPTIVA,2.4 SF" +
            "I ECOTEC FWD 16V GASOLINA 4P AUTOMÁTICO,carros encontrados)")]
        [NUnit.Framework.TestCaseAttribute("ford", "EDGE", "3.5 V6 GASOLINA SEL AUTOMÁTICO", "carros encontrados", null, TestName="Consultar veículos, informando os filtros Marca de Carro(ford,EDGE,3.5 V6 GASOLIN" +
            "A SEL AUTOMÁTICO,carros encontrados)")]
        public virtual void ConsultarVeiculosInformandoOsFiltrosMarcaDeCarro(string marca, string modelo, string versao, string mensagem, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Consultar veículos, informando os filtros Marca de Carro", null, exampleTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given("que um usuário acesse o site WEBMOTORS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 11
 testRunner.When("desejar realizar consulta de veiculos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 12
 testRunner.And(string.Format("informar os dados Marca {0}, Modelo {1} e Versão {2},", marca, modelo, versao), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 13
 testRunner.Then(string.Format("o sistema exibirá o resultado da pesquisa com a mensagem {0}", mensagem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
